import openai
import telebot
import os
import requests
from io import BytesIO
from pdfminer.high_level import extract_text
import pandas as pd
from PIL import Image

# –ü–æ–¥–∫–ª—é—á–∞–µ–º API-–∫–ª—é—á–∏
openai.api_key = os.getenv("OPENAI_API_KEY")
bot = telebot.TeleBot(os.getenv("TELEGRAM_BOT_TOKEN"))

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞
chat_history = []

@bot.message_handler(commands=['start'])
def start_dialog(message):
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –Ø GPT-–±–æ—Ç. –ú–æ–∂–µ—à—å –ø–∏—Å–∞—Ç—å –º–Ω–µ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ñ–∞–π–ª—ã üìé")

@bot.message_handler(commands=['clear'])
def clear_history(message):
    global chat_history
    chat_history = []
    bot.send_message(message.chat.id, "–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞ ‚úÖ")

@bot.message_handler(content_types=['text'])
def handle_text(message):
    global chat_history

    chat_history.append({"role": "user", "content": message.text})

    response = openai.ChatCompletion.create(
        model="gpt-4o",
        messages=chat_history
    )

    reply = response.choices[0].message['content']
    chat_history.append({"role": "assistant", "content": reply})

    bot.send_message(message.chat.id, reply)

@bot.message_handler(content_types=['photo'])
def handle_photo(message):
    # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    file_id = message.photo[-1].file_id
    file_info = bot.get_file(file_id)
    file_url = f"https://api.telegram.org/file/bot{os.getenv('TELEGRAM_BOT_TOKEN')}/{file_info.file_path}"

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ GPT-4o (–µ—Å–ª–∏ –º–æ–¥–µ–ª—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç image_url ‚Äî –¥–ª—è –Ω–æ–≤—ã—Ö –≤–µ—Ä—Å–∏–π openai)
        response = openai.ChatCompletion.create(
            model="gpt-4o",
            messages=[
                {
                    "role": "user",
                    "content": [
                        {"type": "text", "text": "–ß—Ç–æ –Ω–∞ —ç—Ç–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏?"},
                        {"type": "image_url", "image_url": {"url": file_url}}
                    ]
                }
            ]
        )
        reply = response.choices[0].message['content']
        bot.send_message(message.chat.id, reply)
    except Exception as e:
        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å üò¢")

@bot.message_handler(content_types=['document'])
def handle_document(message):
    try:
        file_id = message.document.file_id
        file_info = bot.get_file(file_id)
        file_url = f"https://api.telegram.org/file/bot{os.getenv('TELEGRAM_BOT_TOKEN')}/{file_info.file_path}"
        file_name = message.document.file_name.lower()
        file_data = requests.get(file_url).content

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ PDF
        if file_name.endswith('.pdf'):
            text = extract_text(BytesIO(file_data))
            bot.send_message(message.chat.id, f"–í–æ—Ç —Ç–µ–∫—Å—Ç –∏–∑ PDF:\n\n{ text[:4000] }")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü
        elif file_name.endswith('.xlsx') or file_name.endswith('.xls'):
            df = pd.read_excel(BytesIO(file_data))
            bot.send_message(message.chat.id, f"–¢–∞–±–ª–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –ü–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏:\n\n{df.head().to_string()}")

        elif file_name.endswith('.csv'):
            df = pd.read_csv(BytesIO(file_data))
            bot.send_message(message.chat.id, f"CSV-—Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω. –ü–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏:\n\n{df.head().to_string()}")

        else:
            bot.send_message(message.chat.id, "–§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è ‚ùå")

    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")

# –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
bot.polling()
